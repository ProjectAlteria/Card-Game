#5677161

import pygame
import sys


pygame.init()

WINDOW_HEIGHT = 900
WINDOW_WIDTH = 1600

screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT),pygame.FULLSCREEN)

clock = pygame.time.Clock()

pygame.display.set_caption('Main Menu')

BLACK = (0,0,0)

WHITE = (255,255,255)

BLUE = (173,216,230)

BLUE2 = (42, 67, 148 )

YELLOW = (255, 227, 132)

BROWN = (121, 85, 38)

GREEN = (65, 154, 80)

RED = (182, 78, 67)

ORANGE = (247,157,21)

font = pygame.font.SysFont('arialblack', 150, bold=True)

font_1 = pygame.font.SysFont('arialblack', 75)

font_2 = pygame.font.SysFont('arialblack', 20)

objects = []


class Button:
    def __init__(self, x, y, width, height, buttonText='Button', onclick=None, onepress=False, normal_color = None):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.onclick = onclick
        self.onepress = onepress
        self.alreadypressed = False

        self.fill_color = {
            'normal' : normal_color,
            'on' : '#000000',
            'pressed' : '#ffffff'
        }

        self.button_surface = pygame.Surface((self.width, self.height))
        self.button_rect = pygame.Rect(self.x, self.y, self.width, self.height)

        self.buttonSurf = font_1.render(buttonText, True, WHITE)

        objects.append(self)

    def process(self):
        mouse = pygame.mouse.get_pos()
        self.button_surface.fill(self.fill_color['normal'])

        if self.button_rect.collidepoint(mouse):
            self.button_surface.fill(self.fill_color['on'])
            if pygame.mouse.get_pressed(num_buttons=3)[0]:
                self.button_surface.fill(self.fill_color['pressed'])
                if self.onepress:
                    self.onclick()
                elif not self.alreadypressed:
                    self.onclick()
                    self.alreadypressed = True
                    self.alreadypressed = False

        self.button_surface.blit(self.buttonSurf, [self.button_rect.width/2 - self.buttonSurf.get_rect().width/2, self.button_rect.height/2 - self.buttonSurf.get_rect().height/2])


        screen.blit(self.button_surface, self.button_rect)


def text_objects(text, font, text_col, x, y):
    visual = font.render(text, True, text_col)
    screen.blit(visual, (x,y))


def drawGridplayer():
    SIZE = 150  # size of the grid blocks
    for x in range(115, 715, SIZE):
        for y in range(200, 800, SIZE):
            square = pygame.Rect(x, y, SIZE, SIZE)  # measures for the grid 5677161
            pygame.draw.rect(screen, BLACK, square, 1)

def drawGridcomputer():
    SIZE = 150  # size of the grid blocks
    for x in range(1000, 1600, SIZE):
        for y in range(200, 800, SIZE):
            square = pygame.Rect(x, y, SIZE, SIZE)  # measures for the grid 5677161
            pygame.draw.rect(screen, BLACK, square, 1)

def game_menu():

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        screen.fill(BLUE2)
        pygame.draw.rect(screen, BROWN, (280, 70, 1200,250), border_radius=30)

        text_objects('Naval Battle', font, YELLOW, 375, 80)


        for obj in objects:
            obj.process()

        pygame.display.update()
        clock.tick(60)


def gameloop(set):

    exit_x = []
    x_button = Button(1615, 0, 100, 100, 'X', lambda: gameloop(False), normal_color=RED)
    exit_x.append(x_button)
    if set == False:
        pygame.quit()
        sys.exit()
    elif set == True:
        running = True
        while running:
            screen.fill(BLUE)
            for x in exit_x:
                x.process()
            drawGridplayer()
            drawGridcomputer()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()

            pygame.display.update()
            clock.tick(60)

def rules_page():

    back_buttons = []

    def backfunc():

        for button in back_buttons:
            if button in objects:
                objects.remove(button)
        game_menu()

    back_button = Button(1100, 750, 400, 100, 'Back', backfunc, normal_color=BLUE)
    back_buttons.append(back_button)

    while True:

        screen.fill(BLUE2)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
        pygame.draw.rect(screen, BROWN, (550, 50, 600, 125), border_radius=30)
        text_objects('RULES', font, YELLOW, 675, 40)

        text_objects('1) The game is set on a 4 by 4 grid opening up a sample space of 16 possible positions.',font_2,
                     WHITE, 5, 200)
        text_objects('2) Cards are used as the main mechanic to interact with the grid.', font_2,
                     WHITE, 5, 250)
        text_objects('3) The two types of cards are decision cards and character cards.', font_2,
                     WHITE, 5, 300)
        text_objects('4) The decision cards allow the player to place a bet on where the opponent ship might be on the opponent board.', font_2,
                     WHITE, 5, 350)
        text_objects('5) The character cards allow the player to place their own arrangement of ships on their side of the board.', font_2,
                     WHITE, 5, 400)
        text_objects('6) There are 16 decision cards in total (representing the 16 unique locations on the board) but the player is only dealt a hand of 7 cards.', font_2,
                     WHITE, 5, 450)
        text_objects('7) There are 16 character cards that are present for every playthrough for the player to place on their respective grid.', font_2,
                     WHITE, 5, 500)
        text_objects('8) When the game starts, the player has to guess where the opponent ships may be on the grid using the decision cards.', font_2,
                     WHITE, 5, 550)
        text_objects('9) The points gained are based on the type of card found by the player.', font_2,
                     WHITE, 5, 600)
        text_objects('10) The game continues until the player and the opponent (the computer) have used up their 5 decision cards.', font_2,
                     WHITE, 5, 650)
        text_objects('11 The game ends and the total number of points collected by each is counted.', font_2,
                     WHITE, 5, 700)
        text_objects('12) The one with the highest number wins.', font_2,
                     WHITE, 5, 750)
        text_objects('13) Let the battle begin!', font_2,
                     WHITE, 5, 800)

        for button in back_buttons:
            button.process()

        pygame.display.update()
        clock.tick(60)





play_button = Button(550, 500, 600, 150, 'Play', lambda : gameloop(True), normal_color = GREEN)

rules_button = Button(550, 700, 600, 150, 'Rules', rules_page, normal_color = ORANGE)

ex_button = Button(550, 900, 600, 150, 'Exit', lambda : gameloop(False), normal_color = RED)






game_menu()
