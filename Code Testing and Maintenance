# 5673324
# implementing Pytest framework and code to test the Card Class

import pygame
import pytest

from source.card_class import CARD
from source.card_class import GRID
from source.card_class import TEXT
from source.button_class import Button
from unittest.mock import MagicMock, patch

# Initialize pygame and screen
pygame.init()
pygame.display.set_mode((800, 600))  # we need a display window to test out the mouse clicker event
font_1 = pygame.font.SysFont('arialblack', 20)  # font needs to be declared so it can be used

pygame.font.init()  # had to initialise for pygame fonts to work
font = pygame.font.SysFont("arialblack", 150)  # declared it outside the test so it could be used
font_1 = pygame.font.SysFont("arialblack", 75)
YELLOW_TEXT = (255, 227, 132)

#   Test for Card Initialisation
def test_card_init():
    card = CARD(
        x = 800, y=230,
        width = 150, height=150,
        color= 'PINK',
        text_1 = 'HMS Mary',text_2 = '14', #text2 is the points the card holds
        text_color = 'WHITE',
        text_1_x = '110', #x1 coordinate
        text_1_y = '110', #y1 coordinate
        text_2_x = '21', #x2 coordinate
        text_2_y = '60', #y2 coordinate
        font = font

    )
    assert card.x == 800
    assert card.y == 230
    assert card.width == 150
    assert card.height == 150
    assert card.color == 'PINK'
    assert card.text_1 == 'HMS Mary'
    assert card.text_2 == '14'
    assert card.text_color == 'WHITE'
    assert card.text_1_x == '110'
    assert card.text_1_y == '110'
    assert card.text_2_x == '21'
    assert card.text_2_y == '60'
    assert card.font == font


# Test for Player Grid Initialisation
def test_player_grid_init():
    grid = GRID(
        size_blocks=150,
        x_upper_range=115,
        x_lower_range=715,
        y_upper_range=200,
        y_lower_range=800,
        color='BLACK'
    )
    assert grid.size_blocks == 150
    assert grid.x_upper_range == 115
    assert grid.x_lower_range == 715
    assert grid.y_upper_range == 200
    assert grid.y_lower_range == 800
    assert grid.color == 'BLACK'


# Test for Computer Grid Initialisation
def test_computer_grid_init():
    grid = GRID(
        size_blocks=150,
        x_upper_range=1000,
        x_lower_range=1600,
        y_upper_range=200,
        y_lower_range=800,
        color='BLACK'
    )
    assert grid.size_blocks == 150
    assert grid.x_upper_range == 1000
    assert grid.x_lower_range == 1600
    assert grid.y_upper_range == 200
    assert grid.y_lower_range == 800
    assert grid.color == 'BLACK'


# Test for Text Class Initialisation
def test_text_class_init():
    text = TEXT(
        text='Naval Battle',
        font=font,
        text_color=YELLOW_TEXT,
        x=390,
        y=75
    )
    assert text.text == 'Naval Battle'
    assert text.font == font
    assert text.text_color == YELLOW_TEXT
    assert text.x == 390
    assert text.y == 75


# Test for Play Button Initialisation
def test_play_button_init():
    mock_callback = MagicMock()  # mock can be used to replace objects in the code so they can be tested without calling the full game
    button = Button(
        x=550,
        y=500,
        width=600,
        height=150,
        font_text=font_1,
        color_text=pygame.Color('white'),
        onclick=mock_callback,
        onepress=True,
        normal_color=(65, 154, 80)  # normal_color is a keyword argument and it maps to fill_color in assert
    )

    assert button.x == 550
    assert button.y == 500
    assert button.width == 600
    assert button.height == 150
    assert button.font_text == font_1
    assert button.color_text == pygame.Color('white')
    assert button.onclick == mock_callback
    assert button.onepress is True  # had to be declared as 'is True' instead of '= True' because it was raising TypeErrors
    assert button.alreadypressed is False  # had to be declared as 'is False' instead of '= False' because it was raising TypeErrors
    assert button.fill_color == {
        'normal': (65, 154, 80),
        'on': '#000000',
        'pressed': '#ffffff'
    }

    # tests that the play button is pressed within the x and y parameters of the rectangle it is contained in
    # the patch (return values= 1, 0, 0) keys with trigger events for (left, middle, right) mouse buttons so it simulates the left mouse button being clicked
    with patch('pygame.mouse.get_pos', return_value=(550, 500)), \
            patch('pygame.mouse.get_pressed', return_value=(1, 0, 0)):
        button.process()
    # button.process() is calling the 'process' method from the source file 'button_class.py'
    # in the Button class, def process(self) handles the mouse clicker and hover functionality
    mock_callback.assert_called_once()
# the onclick function from the button class was mocked with MagicMock and asserted with 'mock_callback'
# it has been tested here and called once, and it shows that the button clicker logic works


# Test for Exit Button Initialisation
def test_exit_button_init():
    dummy_callback = MagicMock()
    button = Button(
        x=550,
        y=900,
        width=600,
        height=150,
        font_text=font_1,
        color_text=pygame.Color('white'),
        onclick=dummy_callback,
        onepress=False,
        normal_color=(182, 78, 67)
    )
    assert button.x == 550
    assert button.y == 900
    assert button.width == 600
    assert button.height == 150
    assert button.font_text == font_1
    assert button.color_text == pygame.Color('white')
    assert button.onclick == dummy_callback
    assert button.onepress is False
    assert button.fill_color == {
        'normal': (182, 78, 67),
        'on': '#000000',
        'pressed': '#ffffff'
    }
    with patch('pygame.mouse.get_pos', return_value=(550, 900)), \
            patch('pygame.mouse.get_pressed', return_value=(1, 0, 0)):
        button.process()
    dummy_callback.assert_called_once()



#5673324
