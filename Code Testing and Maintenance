# 5673324
# implementing Pytest framework and code to test the Card Class
import pygame
import pytest
from source.card_class import CARD
from source.card_class import GRID
from source.card_class import Button
from unittest.mock import MagicMock, patch

pygame.font.init()  # had to initialise for pygame fonts to work
font = pygame.font.SysFont("arialblack", 20)  # declared it outside the test so it could be used
font_1 = pygame.font.SysFont("arialblack", 75)

#   Test for Card Initialisation
def test_card_init():
    card = CARD(
        x = 800, y=230,
        width = 150, height=150,
        color= 'PINK',
        text_1 = 'HMS Mary',text_2 = '14', #text2 is the points the card holds
        text_color = 'WHITE',
        text_1_x = '110', #x1 coordinate
        text_1_y = '110', #y1 coordinate
        text_2_x = '21', #x2 coordinate
        text_2_y = '60', #y2 coordinate
        font = font

    )
    assert card.x == 800
    assert card.y == 230
    assert card.width == 150
    assert card.height == 150
    assert card.color == 'PINK'
    assert card.text_1 == 'HMS Mary'
    assert card.text_2 == '14'
    assert card.text_color == 'WHITE'
    assert card.text_1_x == '110'
    assert card.text_1_y == '110'
    assert card.text_2_x == '21'
    assert card.text_2_y == '60'
    assert card.font == font

# Test for Player Grid Initialisation
def test_player_grid_init():
    grid = GRID(
        size_blocks=150,
        x_upper_range=115,
        x_lower_range=715,
        y_upper_range=200,
        y_lower_range=800,
        color='BLACK'
    )
    assert grid.size_blocks == 150
    assert grid.x_upper_range == 115
    assert grid.x_lower_range == 715
    assert grid.y_upper_range == 200
    assert grid.y_lower_range == 800
    assert grid.color == 'BLACK'


# Test for Computer Grid Initialisation
def test_computer_grid_init():
    grid = GRID(
        size_blocks=150,
        x_upper_range=1000,
        x_lower_range=1600,
        y_upper_range=200,
        y_lower_range=800,
        color='BLACK'
    )
    assert grid.size_blocks == 150
    assert grid.x_upper_range == 1000
    assert grid.x_lower_range == 1600
    assert grid.y_upper_range == 200
    assert grid.y_lower_range == 800
    assert grid.color == 'BLACK'

# Test for Button Initialisation

def test_play_button_init():
    mock_callback = MagicMock()
    button = Button(
        x=550,
        y=500,
        width=600,
        height=150,
        font_text='font_1',
        color_text='WHITE',
        onclick=mock_callback,
        onepress=True,
        alreadypressed=False,
        fill_color={'normal': (255, 255, 255), 'on': (200, 200, 200), 'pressed': (100, 100, 100)}
    )

    assert button.x == 550
    assert button.y == 500
    assert button.width == 600
    assert button.height == 150
    assert button.font_text == 'font_1'
    assert button.color_text == 'WHITE'
    assert button.onclick == mock_callback
    assert button.onepress is True
    assert button.alreadypressed is False
    assert button.fill_color == {
        'normal': (255, 255, 255),
        'on': (200, 200, 200),
        'pressed': (100, 100, 100)
    }


def test_play_button_click():
    mock_callback = MagicMock()
    button = Button(
        x=550,
        y=500,
        width=600,
        height=150,
        font_text='font_1',
        color_text='WHITE',
        onclick=mock_callback,
        onepress=True,
        alreadypressed=False,
        fill_color={'normal': (255, 255, 255), 'on': (200, 200, 200), 'pressed': (100, 100, 100)}
    )

    # Simulate a mouse click inside the button's area
    with patch('pygame.mouse.get_pos', return_value=(560, 510)), \
         patch('pygame.mouse.get_pressed', return_value=(1, 0, 0)):
        button.process()

    mock_callback.assert_called_once()


#5673324
