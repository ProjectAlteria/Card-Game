# Naval Battle Drag and Drop Game
# Combined by 5673324 and 5677161 on 18th April 2025
# Mouse interaction (5673324) + Decision Cards (5677161)
# Sara later added class structure for character cards
# Eman combined the Grid Class, Text Class and Card Class logic into one file on 4th May 2025
# Ana added method to place cards on the grid
import random
from random import randint

from variables import *

pygame.init()
clock = pygame.time.Clock()
# Get the screen resolution of the user

hit_sound = pygame.mixer.Sound('hit.mp3')
not_hit_sound = pygame.mixer.Sound('not hit.mp3')

# 5673749 next 4 lines to set global variables for computer 
computer_attack_cells = set()
Cscore = 0
computer_hit_banner_data = None
computer_miss_banner_data = None
score = 0  # initialize player score
computer_grid_occupancy = {}  # new dictionary to track computer's cards(5656652)
hit_banner_data = None  # tuple to store hit info: (card_name, points, time)
miss_banner_data = None  # tuple to store miss info: (message, time)
decision_cards_displayed = False
decision_cards = []  # empty list, which will store decision cards in create_decision_cards function(5656652)
active_cards = None
cards = []




# Grid Class
class GRID():
    def __init__(self, size_blocks, x_upper_range, x_lower_range, y_upper_range, y_lower_range, color):
        self.size_blocks = size_blocks
        self.x_upper_range = x_upper_range
        self.x_lower_range = x_lower_range
        self.y_upper_range = y_upper_range
        self.y_lower_range = y_lower_range
        self.color = color

    def draw(self):

        for x in range(self.x_upper_range, self.x_lower_range, self.size_blocks):
            for y in range(self.y_upper_range, self.y_lower_range, self.size_blocks):
                square = pygame.Rect(x, y, self.size_blocks, self.size_blocks)
                pygame.draw.rect(screen, self.color, square, 1)

    # 5673324 mouse clicker interactive method that checks the x and y grid blocks collide with the mouse position and indicates it with red
    def interactive(self, pos):
        for x in range(self.x_upper_range, self.x_lower_range, self.size_blocks):
            for y in range(self.y_upper_range, self.y_lower_range, self.size_blocks):
                square = pygame.Rect(x, y, self.size_blocks, self.size_blocks)
                if square.collidepoint(pos):
                    pygame.draw.rect(screen, (255, 0, 0), square, 4)


# 5673324

players_grid = GRID(150, 115, 715, 200, 800, BLACK)
computers_grid = GRID(150, 1000, 1600, 200, 800, BLACK)
player_grid_occupancy = {}  # dictionary stores the coordinates of each grid cell currently occupied by a card (5656652)


# Text Class
class TEXT():
    def __init__(self, text, font, text_color, x, y):
        self.text = text
        self.font = font
        self.text_color = text_color
        self.x = x
        self.y = y

    def text_objects(self):
        visual = self.font.render(self.text, True, self.text_color)
        screen.blit(visual, (self.x, self.y))


text_ap = TEXT('A', font_3, BLACK, 50, 220)
text_bp = TEXT('B', font_3, BLACK, 50, 375)
text_cp = TEXT('C', font_3, BLACK, 50, 525)
text_dp = TEXT('D', font_3, BLACK, 50, 675)
text_1p = TEXT('1', font_3, BLACK, 165, 120)
text_2p = TEXT('2', font_3, BLACK, 315, 120)
text_3p = TEXT('3', font_3, BLACK, 465, 120)
text_4p = TEXT('4', font_3, BLACK, 615, 120)

text_ac = TEXT('A', font_3, BLACK, 935, 220)
text_bc = TEXT('B', font_3, BLACK, 935, 375)
text_cc = TEXT('C', font_3, BLACK, 935, 525)
text_dc = TEXT('D', font_3, BLACK, 935, 675)
text_1c = TEXT('1', font_3, BLACK, 1050, 120)
text_2c = TEXT('2', font_3, BLACK, 1200, 120)
text_3c = TEXT('3', font_3, BLACK, 1350, 120)
text_4c = TEXT('4', font_3, BLACK, 1500, 120)

class Button:
    def __init__(self, x, y, width, height, font_text, color_text, buttonText='Button', onclick=None, onepress=False,
                 normal_color=None):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.font_text = font_text
        self.color_text = color_text
        self.onclick = onclick
        self.onepress = onepress
        self.alreadypressed = False

        self.fill_color = {
            'normal': normal_color,
            'on': '#000000',
            'pressed': '#ffffff'
        }

        self.button_surface = pygame.Surface((self.width, self.height))
        self.button_rect = pygame.Rect(int(self.x), int(self.y), self.width, self.height)

        self.buttonSurf = self.font_text.render(buttonText, True, self.color_text)

        objects.append(self)

    def process(self):
        mouse = pygame.mouse.get_pos()
        self.button_surface.fill(self.fill_color['normal'])

        if self.button_rect.collidepoint(mouse):
            self.button_surface.fill(self.fill_color['on'])
            if pygame.mouse.get_pressed(num_buttons=3)[0]:
                self.button_surface.fill(self.fill_color['pressed'])
                if self.onepress:
                    self.onclick()
                elif not self.alreadypressed:
                    self.onclick()
                    self.alreadypressed = True
                    self.alreadypressed = False

        self.button_surface.blit(self.buttonSurf, [self.button_rect.width / 2 - self.buttonSurf.get_rect().width / 2,
                                                   self.button_rect.height / 2 - self.buttonSurf.get_rect().height / 2])

        screen.blit(self.button_surface, self.button_rect)

# Card Class
class CARD():
    def __init__(self, x, y, width, height, color, text_1, text_2, text_color, text_1_x, text_1_y, text_2_x, text_2_y,
                 font):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.color = color
        self.text_1 = text_1
        self.text_2 = text_2
        self.text_color = text_color
        self.text_1_x = text_1_x
        self.text_1_y = text_1_y
        self.text_2_x = text_2_x
        self.text_2_y = text_2_y
        self.font = font

        self.card_surface_1 = pygame.Surface((self.width, self.height))
        self.card_surface_2 = self.card_surface_1.copy()
        self.card_rect = pygame.Rect(self.x, self.y, self.width, self.height)
        self.cardSurf_1 = self.font.render(text_1, True, self.text_color)
        self.cardSurf_2 = self.font.render(text_2, True, self.text_color)
        cards.append(self)

    def show(self):
        self.card_surface_1.fill(self.color)
        self.card_surface_2.fill(self.color)
        self.card_surface_1.blit(self.cardSurf_1, [self.text_1_x, self.text_1_y])
        self.card_surface_1.blit(self.cardSurf_2, [self.text_2_x, self.text_2_y])
        screen.blit(self.card_surface_1, self.card_rect)
        pygame.draw.rect(screen, WHITE, self.card_rect, 5)

    def collidepoint(self, pos):
        return self.card_rect.collidepoint(pos)

    def move_ip(self, rel):
        self.card_rect.move_ip(rel)


def gameloop():
    global screen, clock
    pygame.init()
    screen = pygame.display.set_mode((1600, 900))
    pygame.display.set_caption('Naval Battle')
    clock = pygame.time.Clock()


# Create cards
CARD(10, 30, CARD_LENGTH, CARD_LENGTH, GREY, '3', 'Cruise', WHITE, 126, 110, 39, 60, font_1)
CARD(200, 30, CARD_LENGTH, CARD_LENGTH, GREY, '4', 'Cruise', WHITE, 126, 110, 39, 60, font_1)
CARD(400, 30, CARD_LENGTH, CARD_LENGTH, ORANGE, '8', 'Carrier', BLACK, 120, 110, 39, 60, font_1)
CARD(600, 30, CARD_LENGTH, CARD_LENGTH, ORANGE, '7', 'Carrier', BLACK, 120, 110, 39, 60, font_1)
CARD(800, 30, CARD_LENGTH, CARD_LENGTH, DARK_BLUE, '6', 'Submarine', WHITE, 120, 110, 18, 60, font_1)
CARD(1000, 30, CARD_LENGTH, CARD_LENGTH, DARK_BLUE, '12', 'Submarine', WHITE, 110, 110, 18, 60, font_1)
CARD(1200, 30, CARD_LENGTH, CARD_LENGTH, DARK_RED, '4', 'Destroyer', WHITE, 120, 110, 22, 60, font_1)
CARD(1400, 30, CARD_LENGTH, CARD_LENGTH, DARK_RED, '14', 'Destroyer', WHITE, 110, 110, 22, 60, font_1)
CARD(10, 230, CARD_LENGTH, CARD_LENGTH, CARD_GREEN, '2', 'Gunboat', WHITE, 120, 110, 30, 60, font_1)
CARD(200, 230, CARD_LENGTH, CARD_LENGTH, CARD_GREEN, '12', 'Gunboat', WHITE, 110, 110, 30, 60, font_1)
CARD(400, 230, CARD_LENGTH, CARD_LENGTH, PURPLE, '5', 'Paladin', WHITE, 126, 110, 37, 60, font_1)
CARD(600, 230, CARD_LENGTH, CARD_LENGTH, PURPLE, '7', 'Paladin', WHITE, 126, 110, 37, 60, font_1)
CARD(800, 230, CARD_LENGTH, CARD_LENGTH, PINK, '14', 'HMS Mary', WHITE, 110, 110, 21, 60, font_1)  # One HMS Mary only
CARD(1000, 230, CARD_LENGTH, CARD_LENGTH, BANANA_YELLOW, '5', 'Banana Boat', BLACK, 120, 110, 6, 60, font_1)
CARD(1200, 230, CARD_LENGTH, CARD_LENGTH, BANANA_YELLOW, '13', 'Banana Boat', BLACK, 110, 110, 6, 60, font_1)
CARD(1400, 230, CARD_LENGTH, CARD_LENGTH, BLACK, 'X', '', RED, 46, 30, 0, 0, font_2)  # Decision card

# 5673324
# separation of the shuffling algorithm logic(Fisher-Yates) and the animation logic for displaying cards

current_step = 0
animating = False
shuffle_targets = []
shuffle_triggered = False  # Flag to track if shuffle has been triggered


def shuffle(cards):
    # exclude the decision card from shuffling (5656652)
    decision_card = None
    for card in cards:
        if card.text_1 == 'X':  # check if it's the decision card
            decision_card = card
            break

    # remove the decision card from the cards list for shuffling (5656652)
    if decision_card:
        cards.remove(decision_card)

    n = len(cards)
    for i in range(n - 1, 0, -1):
        j = randint(0, i + 1)
        cards[i], cards[j] = cards[j], cards[i]

    if decision_card:
        cards.append(decision_card)


def animate_cards(cards, targets, step, total_steps=20):
    # Ensure we're animating only the cards in the shuffle_targets
    for i, card in enumerate(cards[:6]):  # Only animate the first 6 cards
        dx = (targets[i][0] - card.x) // (total_steps - step)
        dy = (targets[i][1] - card.y) // (total_steps - step)
        card.x += dx
        card.y += dy
        card.card_rect.topleft = (int(card.x), int(card.y))

    return cards


# method to place cards on the grid for computer (5656652)
def place_cards_in_grid(cards, grid, occupancy_dict=None):
    positions = []  # empty list to hold all the valid cell positions on the grid
    for x in range(grid.x_upper_range, grid.x_lower_range,
                   grid.size_blocks):  # loops through all x-coordinates (columns) on the grid
        for y in range(grid.y_upper_range, grid.y_lower_range,
                       grid.size_blocks):  # for each x, loops through all y-coordinates (rows) on the grid
            positions.append(
                (x, y))  # adds the current grid cell's top-left position as a tuple (x, y) to the list positions
    random.shuffle(
        positions)  # shuffles the list of grid cell positions randomly so the card placement appears unpredictable
    for i, card in enumerate(cards[
                             :6]):  # loops through the first 6 cards in the provided cards list. Uses enumerate to get both the index i and the card object
        pos = positions[i]  # assigns the i-th random position from the shuffled list to the variable pos
        card.x, card.y = pos  # updates the card's logical coordinates to the chosen grid position
        card.card_rect.topleft = pos  # updates the visual rectangle to the same position
        if occupancy_dict is not None:  # checks if an occupancy dictionary was provided
            occupancy_dict[
                pos] = card  # records that this specific grid position is now occupied by the given card in the occupancy dictionary


# function that creates and returns a set of decision cards for player's guessing
def create_decision_cards():
    global decision_cards  # it refers to a variable defined outside the function. This allows the function to modify the global list rather than a local copy
    spacing = 180  # sets the horizontal space between cards
    start_x = 320  # sets the starting x-coordinate for the first card
    y = 860  # place inside the green deck
    for i in range(6):  # loops allowing to create and add six decision cards
        card = CARD(start_x + i * spacing, y, CARD_LENGTH, CARD_LENGTH, BLACK, 'X', '', RED, 46, 30, 0, 0,
                    font_2)  # card design
        decision_cards.append(card)  # adds cards to the global decision_cards list


# 5656652(end)


def game_loop():
    global shuffle_triggered, current_step, animating, cards
    # Reset game state, including shuffle and animation
    shuffle_triggered = False
    current_step = 0
    animating = False
    cards = []


grids = [players_grid, computers_grid]
coordinates_texts = [text_ap, text_bp, text_cp, text_dp, text_1p, text_2p, text_3p, text_4p, text_ac, text_bc,
                     text_cc, text_dc, text_1c, text_2c, text_3c, text_4c]


# function to place cards on the grid for player. It ensures that a card "snaps" neatly into the closest grid cell when released with the mouse. It loops over every cell in the player's grid and checks whether the center of the dragged card is inside a specific cell. (5656652)
def snap_to_grid(card, grid):
    # check which cell the card is being dropped onto
    for x in range(grid.x_upper_range, grid.x_lower_range,
                   grid.size_blocks):  # loops over grid columns, stepping by the block size
        for y in range(grid.y_upper_range, grid.y_lower_range,
                       grid.size_blocks):  # loops over grid rows, stepping by the block size
            cell = pygame.Rect(x, y, grid.size_blocks,
                               grid.size_blocks)  # defines a rectangular area representing a single cell on the grid
            if cell.collidepoint(card.card_rect.center):  # checks if the card's center is within this grid cell
                # if cell is occupied by another card, reject placement
                if (x, y) in player_grid_occupancy and player_grid_occupancy[(x, y)] != card:
                    return False

                # free previous spot (if any)
                keys_to_remove = [k for k, v in player_grid_occupancy.items() if
                                  v == card]  # finds any previous grid cell that this card occupied
                for k in keys_to_remove:  # removes that previous location from the grid occupancy record
                    del player_grid_occupancy[k]

                # it also removes the card from any previously occupied cell. Snap to new cell and mark as occupied.
                card.x, card.y = x, y  # updates the card’s logical position to the new cell
                card.card_rect.topleft = (x, y)  # updates the card’s visual position to the new cell
                player_grid_occupancy[(x, y)] = card  # marks the new grid cell as occupied by this card
                return True
    return False  # no grid cell matched


# 5656652(end)

explaination = TEXT('Press tab to shuffle and draw your character cards', font_7, WHITE,450, 450)

explaination_1 = TEXT('Place every card on the grid. Each card must have a different coordinate', font_7, WHITE,270, 450)


# Main loop
def play():
    global screen,computer_attack_cells,Cscore,computer_hit_banner_data ,computer_miss_banner_data ,score ,computer_grid_occupancy ,hit_banner_data ,miss_banner_data ,decision_cards_displayed ,decision_cards ,active_cards ,cards,animating, current_step,shuffle_triggered, shuffle_targets
    screen.fill(BLUE)
    pygame.draw.rect(screen, GREEN_DECK, (300, 850, 1100, 250))
    exit_x = []
    for g in grids:
        g.draw()

    for c in coordinates_texts:
        c.text_objects()

    x_button = Button(SCREEN_WIDTH * 0.945, SCREEN_HEIGHT * 0, SCREEN_WIDTH * 0.0625, SCREEN_WIDTH * 0.0625,
                      font_1, WHITE, 'X',
                      lambda: gameloop(False), normal_color=RED)

    exit_x.append(x_button)
    for x in exit_x:
        x.process()

    score_display = font_1.render(f"Score: {score}", True, BLACK)
    screen.blit(score_display, (20, 20))
    # 5673749 displays computers score at top right
    Cscore_display = font_1.render(f"Score: {Cscore}", True, BLACK)
    screen.blit(Cscore_display, (1400, 20))
    banner_1 = pygame.time.get_ticks()
    duration_1 = 3000

    if banner_1 < duration_1:
        pygame.draw.rect(screen, BROWN, (350, 400, 1000, 150))

        pygame.draw.rect(screen, BLACK, (350, 400, 1000, 150), 4)

        explaination.text_objects()

    if banner_1 > duration_1 and banner_1 < 5000:
        pygame.draw.rect(screen, BROWN, (225, 400, 1250, 150))

        pygame.draw.rect(screen, BLACK, (225, 400, 1250, 150), 4)
        explaination_1.text_objects()
    
   # 5673749 Show only cards that are not computer ships - edited to prevent computers ships from showing 
    for c in cards:
        if c in player_grid_occupancy.values():
            c.show()
        elif c.text_1 == 'X':
            c.show()


    if len(player_grid_occupancy) == 6 and not decision_cards_displayed:
        create_decision_cards()
        decision_cards_displayed = True

    # i removed a second instnace of line 315&316 that was here. It was redundant and causing issues 5673749

    if hit_banner_data:
        card_name, points, start_time = hit_banner_data
        if pygame.time.get_ticks() - start_time < 2000:
            hit_sound.play() # show for 2 seconds
            banner_rect = pygame.Rect(350, 400, 1000, 150)
            pygame.draw.rect(screen, (121, 85, 38), banner_rect)  # BROWN background
            pygame.draw.rect(screen, WHITE, banner_rect, 10)  # White thick border

            hit_text = f'HIT: {card_name} ({points} pts)'
            text_surface = font_3.render(hit_text, True, (255, 227, 132))  # Yellow text
            text_rect = text_surface.get_rect(center=banner_rect.center)

            screen.blit(text_surface, text_rect)
        else:
            hit_banner_data = None

    if miss_banner_data:
        message, start_time = miss_banner_data
        if pygame.time.get_ticks() - start_time < 2000:
            not_hit_sound.play() # Show the banner for 2 seconds
            banner_rect = pygame.Rect(350, 400, 1000, 150)
            pygame.draw.rect(screen, (121, 85, 38), banner_rect)
            pygame.draw.rect(screen, WHITE, banner_rect, 10)

            miss_text = f'{message}'  # display "MISS"
            text_surface = font_3.render(miss_text, True, (255, 227, 132))  # Yellow text
            text_rect = text_surface.get_rect(center=banner_rect.center)
            screen.blit(text_surface, text_rect)
        else:
            miss_banner_data = None

            # Hide the miss banner after 2 seconds
        # 5673749 starts here for computer banner data - basically just shows the banner info if computer hits or misses
    if computer_hit_banner_data:
        card_name, points, start_time = computer_hit_banner_data
        if pygame.time.get_ticks() - start_time < 2000:
            banner_rect = pygame.Rect(350, 570, 1400, 180) #rectangle dimensions
            pygame.draw.rect(screen, (121, 85, 38), banner_rect) 
            pygame.draw.rect(screen, WHITE, banner_rect, 10)
            hit_text = f'COMPUTER HIT: {card_name} ({points} pts)' # displays the info
            text_surface = font_3.render(hit_text, True, (255, 227, 132)) # the banner text's color
            text_rect = text_surface.get_rect(center=banner_rect.center)
            screen.blit(text_surface, text_rect)
        else:
            computer_hit_banner_data = None

    if computer_miss_banner_data:
        message, start_time = computer_miss_banner_data
        if pygame.time.get_ticks() - start_time < 2000:
            banner_rect = pygame.Rect(350, 570, 1400, 180) #rectangle dimensions
            pygame.draw.rect(screen, (121, 85, 38), banner_rect)
            pygame.draw.rect(screen, WHITE, banner_rect, 10)
            miss_text = f'COMPUTER {message}' # displays the info
            text_surface = font_3.render(miss_text, True, (255, 227, 132)) # the banner text's color to match the others.
            text_rect = text_surface.get_rect(center=banner_rect.center)
            screen.blit(text_surface, text_rect)
        else:
            computer_miss_banner_data = None
    # 5673749 ends here for computer banner data additions

    # Animation step
    if animating and current_step < 20:
        animate_cards(cards, shuffle_targets, current_step)
        current_step += 1
    elif animating and current_step >= 20:
        animating = False  # Stop animation
        shuffle_triggered = True  # Prevent further shuffling until reset
        player_cards = cards[:6]
        computer_cards = cards[6:12]

        # place and display computer's cards
        place_cards_in_grid(computer_cards, computers_grid)

        # update master list
        cards = player_cards + computer_cards
        place_cards_in_grid(computer_cards, computers_grid, computer_grid_occupancy)
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                for num, c in enumerate(cards):
                    if c.collidepoint(event.pos):
                        active_cards = num

        if event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:
                if active_cards is not None:
                    selected_card = cards[active_cards]
                    # if it's a decision card(5656652)
                    if selected_card.text_1 == 'X':
                        for x in range(computers_grid.x_upper_range, computers_grid.x_lower_range,
                                       computers_grid.size_blocks):  # begins iterating over the x-coordinates of the computer’s grid, stepping by the size of each grid block
                            for y in range(computers_grid.y_upper_range, computers_grid.y_lower_range,
                                           computers_grid.size_blocks):  # iterates over the y-coordinates of the grid, again stepping block by block. Combined with the x-loop, this covers every cell of the computer's grid
                                cell = pygame.Rect(x, y, computers_grid.size_blocks,
                                                   computers_grid.size_blocks)  # defines a rectangle (cell) for the current grid cell. Each cell is a square
                                if cell.collidepoint(
                                        selected_card.card_rect.center):  # checks if the center of the released decision card lies within this grid cell. This determines which cell the card was dropped on
                                    if (x,
                                        y) in computer_grid_occupancy:  # checks if the grid cell contains an enemy unit (i.e., it’s occupied). computer_grid_occupancy is a dictionary mapping cell coordinates to unit cards
                                        # if it is a hit
                                        hit_card = computer_grid_occupancy[
                                            (x, y)]  # retrieves the card (target) located at that grid cell
                                        hit_banner_data = (hit_card.text_2, hit_card.text_1,
                                                           pygame.time.get_ticks())  # Stores data related to the hit, including the unit's name (text_2), value or strength (text_1), and the current time. This used for displaying a hit message
                                        score += int(
                                            hit_card.text_1)  # increases the player's score based on the value (text_1) of the destroyed unit
                                    else:  # if the cell is empty, it's a miss
                                        miss_banner_data = ("MISS", pygame.time.get_ticks())  # Display miss banner

                                        # snap decision card to the grid cell
                                    selected_card.x, selected_card.y = x, y
                                    selected_card.card_rect.topleft = (x, y)

                                    pygame.display.flip()  # 5673749 Show player's hit/miss result now
                                    pygame.time.delay(1500)  # 5673749 Pause for 1.5 seconds so player can see the result

                                    # Computer attack 5673749
                                    while True:
                                        cx = random.randrange(players_grid.x_upper_range, players_grid.x_lower_range,
                                                              players_grid.size_blocks)
                                        cy = random.randrange(players_grid.y_upper_range, players_grid.y_lower_range,
                                                              players_grid.size_blocks)

                                        if (cx, cy) not in computer_attack_cells: # appends chosen places to prevent being attacked again
                                            computer_attack_cells.add((cx, cy))

                                            if (cx, cy) in player_grid_occupancy:
                                                # Player's card is hit
                                                Chit_card = player_grid_occupancy[(cx, cy)]
                                                computer_hit_banner_data = (
                                                    Chit_card.text_2, Chit_card.text_1, pygame.time.get_ticks())
                                                Cscore += int(Chit_card.text_1)

                                                # Remove player's ship from grid and visual list
                                                del player_grid_occupancy[(cx, cy)]
                                                if Chit_card in cards:
                                                    cards.remove(Chit_card)

                                            else:
                                                # It's a miss
                                                computer_miss_banner_data = ("MISS", pygame.time.get_ticks())

                                            # Place the red X decision card on the attacked cell
                                            Ccard = CARD(cx, cy, CARD_LENGTH, CARD_LENGTH, BLACK, 'X', '', RED, 46, 30,
                                                         0, 0, font_2)
                                            Ccard.x, Ccard.y = cx, cy
                                            Ccard.card_rect.topleft = (cx, cy)
                                            cards.append(Ccard)

                                            break
                                    # computer attack ends

                    else:
                        snap_to_grid(selected_card,
                                     players_grid)  # if the released card is a regular unit (not a decision card), it tries to snap to the player's grid using snap_to_grid.
                    # 5656652(end)
                    active_cards = None

        if event.type == pygame.MOUSEMOTION and active_cards is not None:
            cards[active_cards].move_ip(event.rel)

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not shuffle_triggered:  # Only allow shuffle once
                shuffle(cards)
                shuffled_cards = cards[:12]  # take 6 for player, 6 for computer
                player_cards = shuffled_cards[:6]
                computer_cards = shuffled_cards[6:12]
                start_x = 320
                spacing = 180  # Set more space between the shuffled cards
                shuffle_targets = [(start_x + i * spacing, 900) for i in range(6)]  # Spread cards horizontally
                current_step = 0
                animating = True
                shuffle_triggered = True  # Prevent further shuffling until reset

                # store for later snapping
                cards[:] = player_cards + computer_cards

                # auto-place computer cards after animation completes (5656652)
                computer_cards_to_place = computer_cards  # store temporarily

        if event.type == pygame.QUIT:
            run = False

    pygame.display.flip()
    clock.tick(60)

pygame.quit()
