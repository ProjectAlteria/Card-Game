#5673749 - Fixing the Grid

import random

#the original GRID class but tweaked a bit
class GRID:
    def __init__(self, size_blocks, x_upper_range, x_lower_range, y_upper_range, y_lower_range, color):
        self.size_blocks = size_blocks
        self.x_upper_range = x_upper_range
        self.x_lower_range = x_lower_range
        self.y_upper_range = y_upper_range
        self.y_lower_range = y_lower_range
        self.color = color

        # Game-specific grid
        self.player_grid = [["" for _ in range(4)] for _ in range(4)]
        self.computer_grid = [["" for _ in range(4)] for _ in range(4)]
        self.player_card_options = ['ship 1', 'ship 2', 'ship 3', 'ship 4']
        self.coord_options = ['A1', 'A2', 'A3', 'A4',
                              'B1', 'B2', 'B3', 'B4',
                              'C1', 'C2', 'C3', 'C4',
                              'D1', 'D2', 'D3', 'D4']

    def coord_to_index(self, coord):
        row_map = {'A': 0, 'B': 1, 'C': 2, 'D': 3}
        return row_map[coord[0].upper()], int(coord[1]) - 1

    def display_grid(self, grid, title="Grid"):
        print(f"\n{title}")
        print("    1   2   3   4")
        print("  +---+---+---+---+")
        row_labels = ['A', 'B', 'C', 'D']
        for i in range(len(grid)):
            row_display = f"{row_labels[i]} |"
            for j in range(len(grid[i])):
                if title == "Enemy Grid" and grid[i][j] == "S":
                    cell = " "  # hide enemy ships
                else:
                    cell = grid[i][j] if grid[i][j] != "" else " "
                row_display += f"{cell:^3}|"
            print(row_display)
            print("  +---+---+---+---+")

    def place_ship_and_attack(self):
        # Place player's ship
        print("You can choose any ship from:", self.player_card_options)
        ship_coord = input("Pick a square to place your ship (e.g. B3): ").strip().upper()

        if ship_coord not in self.coord_options:
            print(" Invalid coordinate.")
            return

        row, col = self.coord_to_index(ship_coord)

        if self.player_grid[row][col] == "":
            self.player_grid[row][col] = "S"
            print(f" Your ship has been placed at {ship_coord}.")
        else:
            print(" This spot is already taken.")
            return

        #Computer turn (placing a ship randomly)
        valid_spots = [c for c in self.coord_options if self.computer_grid[self.coord_to_index(c)[0]][self.coord_to_index(c)[1]] == ""]
        if valid_spots:
            computer_position = random.choice(valid_spots)
            comp_row, comp_col = self.coord_to_index(computer_position)
            self.computer_grid[comp_row][comp_col] = "S"
            computer_card = random.choice(self.player_card_options)
            print(f"The computer card is {computer_card}, and it is placed in {computer_position}")

        #  Player attacks
        print("\nChoose a card to attack your opponent:")
        for card in self.player_card_options:
            print("-", card)

        player_card = input("Your card: ").strip().lower()
        if player_card not in [c.lower() for c in self.player_card_options]:
            print(" Invalid card.")
            return

        attack_coord = input("Pick a square to attack (e.g. C2): ").strip().upper()
        if attack_coord not in self.coord_options:
            print(" Invalid coordinate.")
            return

        a_row, a_col = self.coord_to_index(attack_coord)

        if self.computer_grid[a_row][a_col] == "S":
            print("Hit!")
            self.computer_grid[a_row][a_col] = "X"
        else:
            print("Miss!")
            self.computer_grid[a_row][a_col] = ("M"
                                                "")

        # Show updated grid
        self.display_grid(self.player_grid, "Your Grid")
        self.display_grid(self.computer_grid, "Enemy Grid")

    def draw(self):

        for x in range(self.x_upper_range, self.x_lower_range, self.size_blocks):
            for y in range(self.y_upper_range, self.y_lower_range, self.size_blocks):
                square = pygame.Rect(x, y, self.size_blocks, self.size_blocks)
                pygame.draw.rect(screen, self.color, square, 1)


# To use the class
game = GRID(4, 4, 0, 4, 0, "blue")
#remove this comment to make it a 1 round game
#game.place_ship_and_attack()

#this adds rounds to the game
round_number = 1
while True:
    print(f"\n ROUND {round_number} ")
    game.place_ship_and_attack()
    next_round = input("Press Enter to continue or type 'q' to quit: ").strip().lower()
    if next_round == 'q':
        print("Game over!")
        break
    round_number += 1

    #5673749 ends here
