#Ship Class (5656652)
class Ship:
    def __init__(self, name:str, points:int):#Method for ship's name, points and whether it is sunk (5656652)
        self.name = name
        self.points = points
        self.sunk=False

    def __repr__(self):#Method to show the status of the ship (5656652)
        status = "Sunk" if self.sunk else "Alive"
        return f"Ship {self.name}({self.points} points)-{status}"
#5673324
# an implementation of the Fisher-Yates shuffling algorithm for deciding what decision cards the player is dealt
from random import randint
# on the 4 by 4 grid the rows are A-D and the columns are numbered 1-4
# the decision cards for now are strings because there is no present implementation of the grid or the cards
decision_cards = ['A1', 'A2', 'A3', 'A4', 'B1', 'B2', 'B3', 'B4', 'C1', 'C2', 'C3', 'C4','D1', 'D2', 'D3', 'D4']
n = len(decision_cards)
def randomize (decision_cards, n):
# the algorithm takes the element at the end that's why we start at n-1 and swap the cards one by one
      for i in range(n-1, 0, -1): # start at the end of the array and go up to zero, decrementing each time 
          j = randint(0, i+1) # we take a random integer to the left of the last element for swapping 
            #here the position of the card at [i] is being swapped with [j]
          decision_cards[i], decision_cards[j] = decision_cards[j], decision_cards[i]
      return decision_cards

print(randomize(decision_cards,n))
#5673324

import pygame 
import sys

#size of display 5677161
WINDOW_HEIGHT = 800
WINDOW_WIDTH = 800

#color that are going to be used 5677161

BLUE = (173,216,230) #rgb for black 5677161
BLACK = (0,0,0) #rgb for blue 5677161

#setting screen color 5677161
screen_color = BLUE


def drawGrid():
    SIZE = 200  # size of the grid blocks
    for x in range(0, WINDOW_WIDTH, SIZE):
        for y in range(0, WINDOW_HEIGHT, SIZE):
            square = pygame.Rect(x, y, SIZE, SIZE)  # measures for the grid 5677161
            pygame.draw.rect(screen, BLACK, square, 1)


def gameloop():
    global screen, clock #to make variables accessible throughout the whole code 5677161
    pygame.init()
    screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT)) #defining size of the screen 5677161
    pygame.display.set_caption('Naval Battle')
    clock = pygame.time.Clock()


    while True:
        screen.fill(screen_color)
        drawGrid()

    #check active events in the game loop 5677161
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  #checks for quit events 5677161
                pygame.quit()
                sys.exit()  #exits the system 5677161
        pygame.display.update()  #refreshes the screen 5677161
        clock.tick(60)


gameloop() #5677161
