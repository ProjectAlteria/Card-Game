# Naval Battle Drag and Drop Game
# Combined by 5673324 and 5677161 on 18th April 2025
# Mouse interaction (5673324) + Decision Cards (5677161)
# Sara later added class structure for character cards

import sys
import pygame
import random

pygame.init()
clock = pygame.time.Clock()
screen = pygame.display.set_mode((1600, 900))
pygame.display.set_caption('Naval Battle Drag and Drop')

active_cards = None
cards = []
CARD_LENGTH = 150

# Colors
BLACK = (0,0,0)
WHITE = (255,255,255)
GREY = (144,141,143)
BLUE = (173,216,230)
RED = (182, 78, 67)
ORANGE = (247,157,21)
DARK_BLUE = (17,65,175)
DARK_RED = (232,39,39)
CARD_GREEN = (82,188,78)
PURPLE = (142,56,218)
PINK = (238,83,186)
BANANA_YELLOW = (247,218,26)
GREEN_DECK = (10,141,41)

# Fonts
font_1 = pygame.font.SysFont('arialblack', 20)
font_2 =  pygame.font.SysFont('arialblack', 65, bold=True)

class CARD():
    def __init__(self, x, y, width, height, color, text_1, text_2, text_color, text_1_x, text_1_y, text_2_x, text_2_y, font):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.color = color
        self.text_1 = text_1
        self.text_2 = text_2
        self.text_color = text_color
        self.text_1_x = text_1_x
        self.text_1_y = text_1_y
        self.text_2_x = text_2_x
        self.text_2_y = text_2_y
        self.font = font

        self.card_surface_1 = pygame.Surface((self.width, self.height))
        self.card_surface_2 = self.card_surface_1.copy()
        self.card_rect = pygame.Rect(self.x, self.y, self.width, self.height)
        self.cardSurf_1 = self.font.render(text_1, True, self.text_color)
        self.cardSurf_2 = self.font.render(text_2, True, self.text_color)
        cards.append(self)

    def show(self):
        self.card_surface_1.fill(self.color)
        self.card_surface_2.fill(self.color)
        self.card_surface_1.blit(self.cardSurf_1, [self.text_1_x, self.text_1_y])
        self.card_surface_1.blit(self.cardSurf_2, [self.text_2_x, self.text_2_y])
        screen.blit(self.card_surface_1, self.card_rect)
        pygame.draw.rect(screen, WHITE, self.card_rect, 5)

    def collidepoint(self, pos):
        return self.card_rect.collidepoint(pos)

    def move_ip(self, rel):
        self.card_rect.move_ip(rel)

def drawGridplayer():
    SIZE = 150
    for x in range(100, 700, SIZE):
        for y in range(100, 700, SIZE):
            square = pygame.Rect(x, y, SIZE, SIZE)
            pygame.draw.rect(screen, BLACK, square, 1)

def drawGridcomputer():
    SIZE = 150
    for x in range(900, 1500, SIZE):
        for y in range(100, 700, SIZE):
            square = pygame.Rect(x, y, SIZE, SIZE)
            pygame.draw.rect(screen, BLACK, square, 1)

def gameloop():
    global screen, clock
    pygame.init()
    screen = pygame.display.set_mode((1600, 900))
    pygame.display.set_caption('Naval Battle')
    clock = pygame.time.Clock()

# Create cards
CARD(10,30,CARD_LENGTH, CARD_LENGTH, GREY, '3', 'Cruise', WHITE, 126, 110, 39,60, font_1)
CARD(200,30,CARD_LENGTH, CARD_LENGTH, GREY, '4', 'Cruise', WHITE, 126, 110, 39,60, font_1)
CARD(400,30,CARD_LENGTH, CARD_LENGTH, ORANGE, '8', 'Carrier', BLACK,120, 110,39,60, font_1)
CARD(600,30,CARD_LENGTH, CARD_LENGTH, ORANGE, '7', 'Carrier', BLACK,120, 110,39,60, font_1)
CARD(800,30,CARD_LENGTH, CARD_LENGTH, DARK_BLUE, '6', 'Submarine', WHITE, 120, 110,18,60, font_1)
CARD(1000,30,CARD_LENGTH, CARD_LENGTH, DARK_BLUE, '12', 'Submarine', WHITE, 110, 110,18,60, font_1)
CARD(1200, 30,CARD_LENGTH, CARD_LENGTH, DARK_RED, '4', 'Destroyer', WHITE,120,110,22,60, font_1)
CARD(1400,30,CARD_LENGTH, CARD_LENGTH, DARK_RED, '14', 'Destroyer', WHITE,110,110,22,60, font_1)
CARD(10,230,CARD_LENGTH, CARD_LENGTH, CARD_GREEN, '2', 'Gunboat', WHITE, 120, 110,30,60, font_1)
CARD(200,230,CARD_LENGTH, CARD_LENGTH, CARD_GREEN, '12', 'Gunboat', WHITE, 110, 110,30,60, font_1)
CARD(400,230,CARD_LENGTH, CARD_LENGTH, PURPLE, '5', 'Paladin', WHITE, 126, 110,37,60, font_1)
CARD(600,230,CARD_LENGTH, CARD_LENGTH, PURPLE, '7', 'Paladin', WHITE, 126, 110,37,60, font_1)
CARD(800,230,CARD_LENGTH, CARD_LENGTH, PINK, '14', 'HMS Mary', WHITE,110,110,21,60, font_1)  # One HMS Mary only
CARD(1000,230,CARD_LENGTH, CARD_LENGTH, BANANA_YELLOW, '5', 'Banana Boat', BLACK,120,110,6,60, font_1)
CARD(1200,230,CARD_LENGTH, CARD_LENGTH, BANANA_YELLOW, '13', 'Banana Boat', BLACK, 110, 110, 6, 60, font_1)
CARD(1400,230,CARD_LENGTH, CARD_LENGTH, BLACK, 'X', '', RED, 46,30,0,0,font_2)  # Decision card

#5673324
#separation of the shuffling algorithm logic(Fisher-Yates) and the animation logic for displaying cards

current_step = 0
animating = False
shuffle_targets = []
shuffle_triggered = False  # Flag to track if shuffle has been triggered

def shuffle(cards):
    n = len(cards)
    for i in range(n-1, 0, -1):
        j = randint(0, i+1)
        cards[i], cards[j] = cards[j], cards[i]

def animate_cards(cards, targets, step, total_steps=20):
    # Ensure we're animating only the cards in the shuffle_targets
    for i, card in enumerate(cards[:6]):  # Only animate the first 6 cards
        dx = (targets[i][0] - card.x) // (total_steps - step)
        dy = (targets[i][1] - card.y) // (total_steps - step)
        card.x += dx
        card.y += dy
        card.card_rect.topleft = (int(card.x), int(card.y))

    return cards

def reset_game():
    global shuffle_triggered, current_step, animating, cards
    # Reset game state, including shuffle and animation
    shuffle_triggered = False
    current_step = 0
    animating = False
    cards = []  # Reset the cards list
    # Re-create the cards (assuming your card creation logic is included here)
    # (This step will reinitialize your card setup)

# Main loop
run = True
while run:
    screen.fill(BLUE)
    pygame.draw.rect(screen, GREEN_DECK, (252, 725, 1100, 175))
    drawGridplayer()
    drawGridcomputer()

    # Display cards
    for c in cards:
        c.show()

    # Animation step
    if animating and current_step < 20:
        animate_cards(cards, shuffle_targets, current_step)
        current_step += 1
    elif animating and current_step >= 20:
        cards = cards[:6]  # Keep only the first 6 cards after animation
        animating = False  # Stop animation
        shuffle_triggered = True  # Prevent further shuffling until reset

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                for num, c in enumerate(cards):
                    if c.collidepoint(event.pos):
                        active_cards = num

        if event.type == pygame.MOUSEBUTTONUP:
            if event.button == 1:
                active_cards = None

        if event.type == pygame.MOUSEMOTION and active_cards is not None:
            cards[active_cards].move_ip(event.rel)

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not shuffle_triggered:  # Only allow shuffle once
                shuffle(cards)
                shuffled_cards = cards[:6]  # Get the first 6 shuffled cards
                start_x = 300
                spacing = 150  # Set more space between the shuffled cards
                shuffle_targets = [(start_x + i * spacing, 760) for i in range(6)]  # Spread cards horizontally
                current_step = 0
                animating = True
                shuffle_triggered = True  # Prevent further shuffling until reset

            elif event.key == pygame.K_r:  # Press 'R' to reset the game
                reset_game()

        if event.type == pygame.QUIT:
            run = False

    pygame.display.flip()
    clock.tick(60)

pygame.quit()

